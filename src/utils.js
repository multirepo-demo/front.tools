const fs = require('fs')
const { resolve, basename } = require('path')
const { spawn } = require("child_process")
const chalk = require('chalk')
const glob = require('glob')

exports.FRONT_HOME = process.env.FRONT_HOME || resolve(process.cwd(), '../')

/**
 * Get array of all symlinks(names) in folder. Used to determine npm linked packages
 * @param {string} path absolute path to folder
 */
exports.getAllSymlinksInFolder = (path) => {
	return fs.readdirSync(path)
		.filter((item) => fs.lstatSync(`${path}/${item}`).isSymbolicLink())
}

/**
 * Check is package has front.tools in dependencies
 * @param {string} pathToPackage absolute path to package
 */
exports.packageHasFrontTools = (pathToPackage) => {
	const packageDevDeps = require(pathToPackage + "/package.json").devDependencies
	return packageDevDeps && Object.keys(packageDevDeps).includes("front.tools")
}

/**
 * @param {string} command process to run
 * @param {string[]} args commandline arguments
 * @returns {Promise<void>} promise
 */
exports.exec = (command, args, cwd = process.cwd()) => {
	return new Promise((resolve, reject) => {
		const executedCommand = spawn(command, args, {
			stdio: ["inherit", "inherit", "inherit"],
			shell: true,
			cwd
		});

		executedCommand.on("error", error => {
			reject(error);
		});

		executedCommand.on("exit", code => {
			if (code === 0) {
				resolve();
			} else {
				reject();
			}
		});
	});
};

/**
 * Generate entry file (index.js) using dependencies of package
 * @param {Object} deps 
 * @param {String} path 
 * @param {Array<string>} exclude 
 */
exports.generateEntry = (deps, path, exclude) => {
  deps = deps.filter(dep => !exclude.includes(dep)).reduce((tmp, dep) => {
    const depPath = './node_modules/' + dep
    const main = require(depPath + '/package.json').main;
    if(!main) {
      const mods = glob.sync(depPath + '/**/*.js')
      mods.forEach((modPath) => {
        modPath = modPath.substring(15, modPath.length - 3)
        tmp[modPath] = `require('${modPath}')`
      });
    } else {
      tmp[dep] = `require('${dep}')`
    }
    return tmp
  }, {})
  deps = " // FILE AUTOMATICALY GENERATED BY 'generateEntry' \n\n module.exports = " + JSON.stringify(deps, null, 2).replace(/(\")(require\(.+\))(\")/gm, '$2')
  fs.writeFileSync(path, deps)

  return deps;
}

exports.log = {
	error: (msg) => {
		// @ts-ignore
		console.log(chalk.black.bgRed(' ERROR '), msg)
	},
	warn: (msg) => {
		// @ts-ignore
		console.log(chalk.black.bgYellow(' WARN '), msg)
	},
	info: (msg) => {
		// @ts-ignore
		console.log(chalk.black.bgGreen(' INFO '), msg)
	}
}
